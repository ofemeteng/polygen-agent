import { customActionProvider } from '@coinbase/agentkit';
import { z } from 'zod';
import { ThirdwebSDK } from '@thirdweb-dev/sdk';
import { NFTCollection } from '@thirdweb-dev/sdk';
import axios from 'axios';

// Schema for the action parameters
const MintNFTSchema = z.object({
  destinationAddress: z
    .string()
    .regex(/^0x[a-fA-F0-9]{40}$/, "Invalid Ethereum address")
    .describe("The Ethereum address where the NFT should be minted to"),
  name: z
    .string()
    .min(1)
    .describe("The name of the NFT"),
  description: z
    .string()
    .optional()
    .describe("Optional description of the NFT. If not provided, will be generated from the name"),
  modelUrl: z
    .string()
    .url()
    .describe("The URL of the 3D model from Meshy AI")
});

export const mintNFT = customActionProvider({
  name: "mint_nft",
  description: "Mints an NFT from the 3D model to the specified address",
  schema: MintNFTSchema,
  invoke: async (_, args: z.infer<typeof MintNFTSchema>) => {
    try {
      // Validate environment variables
      const CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS;
      const THIRDWEB_CLIENT_ID = process.env.THIRDWEB_CLIENT_ID;

      if (!CONTRACT_ADDRESS || !THIRDWEB_CLIENT_ID) {
        throw new Error("Missing required environment variables");
      }

      // Initialize ThirdWeb SDK
      const sdk = new ThirdwebSDK("ethereum", {
        clientId: THIRDWEB_CLIENT_ID,
      });

      // Get the NFT Collection contract
      const contract = await sdk.getContract(
        CONTRACT_ADDRESS,
        "nft-collection"
      ) as NFTCollection;

      // Download the 3D model from Meshy AI
      const modelResponse = await axios.get(args.modelUrl, {
        responseType: 'arraybuffer'
      });
      const modelBuffer = Buffer.from(modelResponse.data);

      // Upload the 3D model to IPFS using ThirdWeb Storage
      const modelIpfsUri = await sdk.storage.upload(modelBuffer, {
        contentType: "model/gltf-binary"
      });

      // Prepare metadata
      const metadata = {
        name: args.name,
        description: args.description || `A 3D model of ${args.name.toLowerCase()} generated by Polygen agent.`,
        animation_url: modelIpfsUri,
        image: "",
        background_color: "",
        external_url: "",
        customImage: "",
        customAnimationUrl: ""
      };

      // Upload metadata to IPFS
      const metadataUri = await sdk.storage.upload(metadata);

      // Mint NFT using the IPFS URI of the metadata
      const tx = await contract.mintTo(args.destinationAddress, metadataUri);
      const receipt = await tx.wait();

      return JSON.stringify({
        status: "success",
        transactionHash: receipt.transactionHash,
        tokenId: receipt.events?.[0].args?.tokenId?.toString(),
        metadataUri,
        metadata
      }, null, 2);

    } catch (error) {
      if (error instanceof Error) {
        return `Error minting NFT: ${error.message}`;
      }
      return "An unknown error occurred while minting the NFT";
    }
  }
});